{"version":3,"sources":["components/servers.tsx","components/nodes.tsx","components/rules.tsx","components/summary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DataWrapper","props","Dialog","open","dataOpen","onClose","dataClose","DialogTitle","dataTitle","DialogContent","dataContent","DialogActions","Button","onClick","dataSave","ConfirmWrapper","close","username","save","autoFocus","Servers","enqueueSnackbar","useSnackbar","useState","isEdit","setIsEdit","serverData","setServerData","serverID","setServerID","serverTitle","setServerTitle","serverAddress","setServerAddress","serverPort","setServerPort","serverLanIP","setServerLanIP","serverLanNetmask","setServerLanNetmask","serverMTU","setServerMTU","serverDNS","setServerDNS","setDataTitle","setDataOpen","dataClean","LoadServers","useCallback","fetch","method","then","res","json","response","status","data","DefaultMsgOption","variant","message","catch","useEffect","push","Box","component","sx","m","width","autoComplete","TextField","required","id","label","value","onChange","event","target","type","Container","padding","margin","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","index","border","title","address","port","lan_ip","lan_netmask","mtu","dns","ButtonGroup","size","ServerEditOn","color","server_id","url","lastServerData","i","sData","ServerDel","server_data","body","JSON","stringify","Clients","clientData","setClientData","ruleData","setRuleData","conOpen","setConOpen","clientID","setClientID","clientName","setClientName","clientIP","setClientIP","clientExtra","setClientExtra","clientCenter","setClientCenter","clientKeep","setClientKeep","routers","setRouters","ClientAddConfirm","client_data","LoadClients","LoadRules","p","FormControl","minWidth","InputLabel","Select","multiple","split","input","OutlinedInput","renderValue","selected","display","flexWrap","gap","Chip","MenuProps","PaperProps","style","MenuItem","ip","flexGrow","Grid","container","direction","justifyContent","alignItems","spacing","item","FormGroup","left","FormControlLabel","control","Checkbox","checked","server_title","is_server","Tooltip","disableFocusListener","prikey","pubkey","default_rule","is_extra","keepalive","disabled","client_id","client_name","lastClientData","cData","ClientDel","ids","rData","forEach","router","length","ClientEditConfirm","EditTextField","styled","fontSize","textAlign","Rules","ruleIP","setRuleIP","ruleEditIP","setRuleEditIP","RuleEditChange","height","RuleAdd","maxWidth","rule_id","RuleEditConfirm","e","rule_ip","lastRuleData","RuleDel","Summary","allData","setAllData","nodeCfg","setNodeCfg","copyOpen","setCopyOpen","CopyWrapper","nodeCopy","setNodeCopy","copyClose","Typography","whiteSpace","copyData","text","onCopy","LoadAllData","UserCard","cfgType","isServer","Card","CardContent","gutterBottom","name","mb","lan","CardActions","nodeName","para","ShowNodeCfg","serverName","py","server_endpoint","server_lan","users","user","xs","md","user_name","user_is_server","user_lan","user_keepalive","user_prikey","user_pubkey","Divider","myTheme","createTheme","palette","primary","main","blue","autoHideDuration","anchorOrigin","vertical","horizontal","App","tabIndex","setTabIndex","tabList","comp","ThemeProvider","theme","maxSnack","borderBottom","borderColor","Tabs","newValue","centered","Tab","aria-controls","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88ecd825.chunk.js","sourcesContent":["import { useEffect, useCallback, useState } from 'react'\nimport Container from '@mui/material/Container'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport Box from '@mui/material/Box'\nimport TextField from '@mui/material/TextField'\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\n\nimport { useSnackbar } from 'notistack'\nimport { DefaultMsgOption } from '../App'\n\nexport const DataWrapper = (props: any) => {\n  return (\n    <Dialog\n      open={props.dataOpen}\n      onClose={props.dataClose}\n    >\n      <DialogTitle>{props.dataTitle}</DialogTitle>\n      <DialogContent>\n        {props.dataContent}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.dataClose}>取消</Button>\n        <Button onClick={props.dataSave}>提交</Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport const ConfirmWrapper = (props: any) => {\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.close}\n    >\n      <DialogTitle>\n        确定更新[{props.username}]的密钥\n      </DialogTitle>\n      <DialogActions>\n        <Button onClick={props.close}>取消</Button>\n        <Button onClick={props.save} autoFocus>确定</Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default function Servers() {\n  const { enqueueSnackbar } = useSnackbar()\n  const [isEdit, setIsEdit] = useState<boolean>(false)\n  const [serverData, setServerData] = useState<any>([])\n  const [serverID, setServerID] = useState<number>(0)\n  const [serverTitle, setServerTitle] = useState<string>(\"\")\n  const [serverAddress, setServerAddress] = useState<string>(\"\")\n  const [serverPort, setServerPort] = useState<number>(443)\n  const [serverLanIP, setServerLanIP] = useState<string>(\"\")\n  const [serverLanNetmask, setServerLanNetmask] = useState<string>(\"\")\n  const [serverMTU, setServerMTU] = useState<number>(0)\n  const [serverDNS, setServerDNS] = useState<string>(\"\")\n\n  const [dataTitle, setDataTitle] = useState<string>(\"\")\n  const [dataOpen, setDataOpen] = useState<boolean>(false)\n\n  const serverTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setServerTitle(event.target.value)\n  }\n\n  const serverAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setServerAddress(event.target.value)\n  }\n\n  const serverPortChange = (event: any) => {\n    setServerPort(event.target.value)\n  }\n\n  const serverLanIPChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setServerLanIP(event.target.value)\n  }\n\n  const serverLanNetmaskChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setServerLanNetmask(event.target.value)\n  }\n\n  const serverMTUChange = (event: any) => {\n    setServerMTU(event.target.value)\n  }\n\n  const serverDNSChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setServerDNS(event.target.value)\n  }\n\n  const dataClose = () => {\n    dataClean()\n    setDataOpen(false)\n  }\n\n  const dataClean = () => {\n    setServerTitle(\"\")\n    setServerAddress(\"\")\n    setServerPort(443)\n    setServerLanIP(\"\")\n    setServerLanNetmask(\"\")\n    setServerMTU(0)\n    setServerDNS(\"\")\n  }\n\n  const ServerAddOn = () => {\n    setDataTitle(\"添加服务器\")\n    setDataOpen(true)\n  }\n\n  const ServerAddConfirm = () => {\n    let server_data: any = {\n      \"title\": serverTitle,\n      \"address\": serverAddress,\n      \"port\": serverPort,\n      \"lan_ip\": serverLanIP,\n      \"lan_netmask\": serverLanNetmask\n    }\n\n    if (serverMTU !== 0) {\n      server_data[\"mtu\"] = serverMTU\n    }\n\n    if (serverDNS !== \"\") {\n      server_data[\"dns\"] = serverDNS\n    }\n\n    let url: string = `http://127.0.0.1:8373/api/v1/server`\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(server_data)\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"添加成功\", DefaultMsgOption)\n          setDataOpen(false)\n          dataClean()\n          LoadServers()\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const ServerEditOn = (data: any) => {\n    setDataTitle(\"编辑服务器\")\n    setServerID(data.id)\n    setServerTitle(data.title)\n    setServerAddress(data.address)\n    setServerPort(data.port)\n    setServerLanIP(data.lan_ip)\n    setServerLanNetmask(data.lan_netmask)\n    setServerMTU(data.mtu)\n    setServerDNS(data.dns)\n    setIsEdit(true)\n    setDataOpen(true)\n  }\n\n  const ServerEditConfirm = () => {\n    setIsEdit(false)\n\n    let server_data: any = {\n      \"title\": serverTitle,\n      \"address\": serverAddress,\n      \"port\": serverPort,\n      \"lan_ip\": serverLanIP,\n      \"lan_netmask\": serverLanNetmask\n    }\n\n    if (serverMTU !== 0) {\n      server_data[\"mtu\"] = serverMTU\n    }\n\n    if (serverDNS !== \"\") {\n      server_data[\"dns\"] = serverDNS\n    }\n\n    let url: string = `http://127.0.0.1:8373/api/v1/server/${serverID}`\n    fetch(url, {\n      method: \"PUT\",\n      body: JSON.stringify(server_data)\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"修改成功\", DefaultMsgOption)\n          setDataOpen(false)\n          dataClean()\n          LoadServers()\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const ServerDel = (server_id: number) => {\n    let url: string = `http://127.0.0.1:8373/api/v1/server/${server_id}`\n    fetch(url, {\n      method: \"DELETE\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          let lastServerData: any = []\n          for (let i in serverData) {\n            let sData: any = serverData[i]\n            if (sData[\"id\"] !== server_id) {\n              lastServerData.push(sData)\n            }\n          }\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"删除成功\", DefaultMsgOption)\n          setServerData(lastServerData)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const LoadServers = useCallback(() => {\n    const url: string = `http://127.0.0.1:8373/api/v1/data/serverlist`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          const data: any = response.data\n          setServerData(data)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }, [enqueueSnackbar])\n\n  useEffect(() => {\n    LoadServers()\n  }, [LoadServers])\n\n  let dataContent: any = []\n  dataContent.push(\n    <Box\n      key=\"serverInput\"\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 2, width: '25ch' },\n      }}\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          required\n          id=\"title\"\n          label=\"名称\"\n          value={serverTitle}\n          onChange={serverTitleChange}\n        />\n        <TextField\n          required\n          id=\"address\"\n          label=\"服务器地址\"\n          value={serverAddress}\n          onChange={serverAddressChange}\n        />\n        <TextField\n          required\n          id=\"port\"\n          label=\"服务器端口\"\n          type=\"number\"\n          value={serverPort}\n          onChange={serverPortChange}\n        />\n        <TextField\n          required\n          id=\"lan_ip\"\n          label=\"子网网关\"\n          value={serverLanIP}\n          onChange={serverLanIPChange}\n        />\n        <TextField\n          required\n          id=\"lan_netmask\"\n          label=\"子网掩码\"\n          value={serverLanNetmask}\n          onChange={serverLanNetmaskChange}\n        />\n        <TextField\n          required\n          id=\"mtu\"\n          label=\"MTU\"\n          type=\"number\"\n          value={serverMTU}\n          onChange={serverMTUChange}\n        />\n        <TextField\n          required\n          id=\"dns\"\n          label=\"DNS\"\n          value={serverDNS}\n          onChange={serverDNSChange}\n        />\n      </div>\n    </Box>\n  )\n\n  return (\n    <Container sx={{ padding: 2 }}>\n      <Button\n        sx={{ margin: 2 }}\n        variant=\"contained\"\n        onClick={() => ServerAddOn()}\n      >\n        添加服务器\n      </Button>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">ID</TableCell>\n              <TableCell align=\"center\">名称</TableCell>\n              <TableCell align=\"center\">地址</TableCell>\n              <TableCell align=\"center\">端口</TableCell>\n              <TableCell align=\"center\">子网网关</TableCell>\n              <TableCell align=\"center\">子网掩码</TableCell>\n              <TableCell align=\"center\">MTU</TableCell>\n              <TableCell align=\"center\">DNS</TableCell>\n              <TableCell align=\"center\">操作</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {serverData.map((data: any, index: number) => {\n              return (\n                <TableRow\n                  key={\"server-\" + data.id}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell align=\"center\">{data.id}</TableCell>\n                  <TableCell align=\"center\">{data.title}</TableCell>\n                  <TableCell align=\"center\">{data.address}</TableCell>\n                  <TableCell align=\"center\">{data.port}</TableCell>\n                  <TableCell align=\"center\">{data.lan_ip}</TableCell>\n                  <TableCell align=\"center\">{data.lan_netmask}</TableCell>\n                  <TableCell align=\"center\">{data.mtu}</TableCell>\n                  <TableCell align=\"center\">{data.dns}</TableCell>\n\n                  <TableCell align=\"center\">\n                    <ButtonGroup variant=\"contained\">\n                      <Button\n                        size='small'\n                        onClick={() => { ServerEditOn(data) }}\n                      >\n                        编辑\n                      </Button>\n                      <Button\n                        size='small'\n                        variant=\"contained\"\n                        color='error'\n                        onClick={() => ServerDel(data.id)}\n                      >\n                        删除\n                      </Button>\n                    </ButtonGroup>\n                  </TableCell>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <DataWrapper\n        dataOpen={dataOpen}\n        dataClose={dataClose}\n        dataTitle={dataTitle}\n        dataContent={dataContent}\n        dataSave={isEdit ? ServerEditConfirm : ServerAddConfirm}\n      />\n    </Container>\n  )\n}","import { useEffect, useCallback, useState } from 'react'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Box from '@mui/material/Box'\nimport TextField from '@mui/material/TextField'\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport Container from '@mui/material/Container'\nimport Paper from '@mui/material/Paper'\nimport Tooltip from '@mui/material/Tooltip'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport Checkbox from '@mui/material/Checkbox'\nimport FormGroup from '@mui/material/FormGroup'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Grid from '@mui/material/Grid'\nimport OutlinedInput from '@mui/material/OutlinedInput'\nimport Chip from '@mui/material/Chip'\n\nimport { DataWrapper, ConfirmWrapper } from './servers'\nimport { useSnackbar } from 'notistack'\nimport { DefaultMsgOption } from '../App'\n\nexport default function Clients() {\n  const { enqueueSnackbar } = useSnackbar()\n  const [isEdit, setIsEdit] = useState<boolean>(false)\n  const [serverData, setServerData] = useState<any>([])\n  const [clientData, setClientData] = useState<any>([])\n  const [ruleData, setRuleData] = useState<any>([])\n\n  const [dataTitle, setDataTitle] = useState<string>(\"\")\n  const [dataOpen, setDataOpen] = useState<boolean>(false)\n  const [conOpen, setConOpen] = useState<boolean>(false)\n\n  const [serverID, setServerID] = useState<string>(\"\")\n  const [clientID, setClientID] = useState<number>(0)\n  const [clientName, setClientName] = useState<string>(\"\")\n  const [clientIP, setClientIP] = useState<string>(\"\")\n  const [clientExtra, setClientExtra] = useState<boolean>(false)\n  const [clientCenter, setClientCenter] = useState<boolean>(false)\n  const [clientKeep, setClientKeep] = useState<number>(25)\n\n  const [routers, setRouters] = useState<string[]>([])\n  const routersChange = (event: SelectChangeEvent<typeof routers>) => {\n    const { target: { value } } = event\n    setRouters(typeof value === 'string' ? value.split(',') : value)\n  }\n\n  const dataClean = () => {\n    setDataOpen(false)\n    setConOpen(false)\n    setServerID(\"\")\n    setClientID(0)\n    setClientName(\"\")\n    setClientIP(\"\")\n    setClientExtra(false)\n    setClientCenter(false)\n    setClientKeep(25)\n    setRouters([])\n  }\n\n  const dataClose = () => {\n    setDataOpen(false)\n  }\n\n  const conClose = () => {\n    setConOpen(false)\n  }\n\n  const serverIDChange = (event: SelectChangeEvent) => {\n    setServerID(event.target.value)\n  }\n\n  const clientNameChange = (event: any) => {\n    setClientName(event.target.value)\n  }\n\n  const clientIPChange = (event: any) => {\n    setClientIP(event.target.value)\n  }\n\n  const clientExtraChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setClientExtra(event.target.checked)\n  }\n\n  const clientCenterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setClientCenter(event.target.checked)\n  }\n\n  const clientKeepChange = (event: any) => {\n    setClientKeep(event.target.value)\n  }\n\n  const ClientAddOn = () => {\n    setDataTitle(\"添加节点\")\n    setIsEdit(false)\n    setDataOpen(true)\n  }\n\n  const ClientAddConfirm = () => {\n    let client_data: any = {\n      \"username\": clientName,\n      \"ip\": clientIP,\n      \"keepalive\": clientKeep,\n    }\n\n    if (clientExtra) {\n      client_data[\"is_extra\"] = 1\n    } else {\n      client_data[\"is_extra\"] = 0\n    }\n\n    if (clientCenter) {\n      client_data[\"is_server\"] = 1\n    } else {\n      client_data[\"is_server\"] = 0\n    }\n\n    let url: string = `http://127.0.0.1:8373/api/v1/node/${serverID}`\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(client_data)\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"添加成功\", DefaultMsgOption)\n          dataClean()\n          LoadClients()\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n        setDataOpen(false)\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const ClientKeyUpdateOn = (server_id: string, client_id: number, client_name: string) => {\n    setConOpen(true)\n    setServerID(server_id)\n    setClientID(client_id)\n    setClientName(client_name)\n  }\n\n  const ClientKeyUpdateConfirm = () => {\n    const url: string = `http://127.0.0.1:8373/api/v1/node/${serverID}/${clientID}/key`\n    fetch(url, {\n      method: \"PUT\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"修改密钥成功\", DefaultMsgOption)\n          LoadClients()\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n        setConOpen(false)\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const ClientEditOn = (server_id: string, client_id: number) => {\n    setDataTitle(\"增加路由\")\n    setIsEdit(true)\n    setDataOpen(true)\n    setClientID(client_id)\n    setServerID(server_id)\n  }\n\n  const ClientEditConfirm = () => {\n    let ids: number[] = []\n    for (let i in ruleData) {\n      let rData: any = ruleData[i]\n      routers.forEach(router => {\n        if (rData.ip === router) {\n          ids.push(rData.id)\n        }\n      })\n    }\n\n    if (ids.length === 0) {\n      setDataOpen(false)\n      return false\n    }\n\n    const url: string = `http://127.0.0.1:8373/api/v1/data/userrule/${clientID}?rules=${ids}`\n    fetch(url, {\n      method: \"PUT\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"添加路由\", DefaultMsgOption)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n        setDataOpen(false)\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const ClientDel = (server_id: number, client_id: number) => {\n    const url: string = `http://127.0.0.1:8373/api/v1/node/${server_id}/${client_id}`\n    fetch(url, {\n      method: \"DELETE\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          let lastClientData: any = []\n          for (let i in clientData) {\n            let cData: any = clientData[i]\n            if (cData[\"id\"] !== client_id) {\n              lastClientData.push(cData)\n            }\n          }\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"删除成功\", DefaultMsgOption)\n          setClientData(lastClientData)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const LoadServers = useCallback(() => {\n    const url: string = `http://127.0.0.1:8373/api/v1/data/serverlist`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          const data: any = response.data\n          setServerData(data)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }, [enqueueSnackbar])\n\n  const LoadClients = useCallback(() => {\n    const url: string = `http://127.0.0.1:8373/api/v1/data/nodelist`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          const data: any = response.data\n          setClientData(data)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }, [enqueueSnackbar])\n\n  const LoadRules = useCallback(() => {\n    const url: string = `http://127.0.0.1:8373/api/v1/data/rulelist`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          const data: any = response.data\n          setRuleData(data)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }, [enqueueSnackbar])\n\n  useEffect(() => {\n    LoadServers()\n    LoadClients()\n    LoadRules()\n  }, [LoadServers, LoadClients, LoadRules])\n\n  let dataContent: any = []\n  if (isEdit) {\n    dataContent.push(\n      <Box sx={{ p: 2 }} key=\"router\">\n        <FormControl sx={{ minWidth: 225 }}>\n          <InputLabel>规则</InputLabel>\n          <Select\n            multiple\n            value={routers}\n            onChange={routersChange}\n            input={<OutlinedInput label=\"Chip\" />}\n            renderValue={(selected) => (\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {selected.map((value) => (\n                  <Chip key={value} label={value} />\n                ))}\n              </Box>\n            )}\n            MenuProps={{\n              PaperProps: {\n                style: {\n                  width: 225\n                }\n              }\n            }}\n          >\n            {ruleData.map((data: any, index: number) => (\n              <MenuItem\n                key={\"rule\" + index}\n                value={data.ip}\n              >\n                {data.ip}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Box >\n    )\n  } else {\n    dataContent.push(\n      <Box\n        key=\"clientInput\"\n        sx={{ flexGrow: 1, padding: 2 }}\n      >\n        <Grid\n          container\n          direction=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          spacing={3}\n        >\n          <Grid item>\n            <TextField\n              required\n              id=\"username\"\n              label=\"名称\"\n              value={clientName}\n              onChange={clientNameChange}\n            />\n          </Grid>\n\n          <Grid item>\n            <FormControl sx={{ minWidth: 225 }}>\n              <InputLabel>服务器</InputLabel>\n              <Select\n                value={serverID}\n                label=\"服务器\"\n                onChange={serverIDChange}\n              >\n                {serverData.map((data: any, index: number) => {\n                  return (\n                    <MenuItem key={\"server\" + index} value={data.id}>{data.title} - {data.lan_ip}/{data.lan_netmask}</MenuItem>\n                  )\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item>\n            <TextField\n              required\n              id=\"ip\"\n              label=\"子网地址\"\n              value={clientIP}\n              onChange={clientIPChange}\n            />\n          </Grid>\n\n          <Grid item>\n            <TextField\n              required\n              id=\"keepalive\"\n              label=\"心跳时间\"\n              value={clientKeep}\n              onChange={clientKeepChange}\n            />\n          </Grid>\n\n          <Grid item>\n            <FormGroup sx={{ left: 36 }}>\n              <FormControlLabel\n                label=\"允许额外路由\"\n                control={\n                  <Checkbox\n                    checked={clientExtra}\n                    onChange={clientExtraChange}\n                  />\n                }\n              />\n            </FormGroup>\n          </Grid>\n\n          <Grid item>\n            <FormGroup sx={{ left: 36 }}>\n              <FormControlLabel\n                label=\"作为中心节点\"\n                control={\n                  <Checkbox\n                    checked={clientCenter}\n                    onChange={clientCenterChange}\n                  />\n                }\n              />\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Box>\n    )\n  }\n\n  return (\n    <Container sx={{ padding: 2 }}>\n      <Button\n        sx={{ margin: 2 }}\n        variant=\"contained\"\n        onClick={() => ClientAddOn()}\n      >\n        添加节点\n      </Button>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">ID</TableCell>\n              <TableCell align=\"center\">名称</TableCell>\n              <TableCell align=\"center\">服务器</TableCell>\n              <TableCell align=\"center\">子网IP</TableCell>\n              <TableCell align=\"center\">密钥</TableCell>\n              <TableCell align=\"center\">默认路由</TableCell>\n              <TableCell align=\"center\">额外路由</TableCell>\n              <TableCell align=\"center\">心跳时间</TableCell>\n              <TableCell align=\"center\">操作</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {clientData.map((data: any, index: number) => {\n              return (\n                <TableRow\n                  key={\"server-\" + data.id}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell align=\"center\">{data.id}</TableCell>\n                  <TableCell align=\"center\">{data.username}</TableCell>\n                  <TableCell align=\"center\">{data.server_title}</TableCell>\n                  <TableCell align=\"center\">{data.ip}</TableCell>\n                  <TableCell align=\"center\">\n                    <ButtonGroup variant=\"text\" color={data.is_server === 0 ? \"primary\" : \"error\"}>\n                      <Tooltip disableFocusListener title={data.prikey}>\n                        <Button>私钥</Button>\n                      </Tooltip>\n                      <Tooltip disableFocusListener title={data.pubkey}>\n                        <Button>公钥</Button>\n                      </Tooltip>\n                    </ButtonGroup>\n                  </TableCell>\n                  <TableCell align=\"center\">{data.default_rule}</TableCell>\n                  <TableCell align=\"center\">{data.is_extra === 0 ? \"否\" : \"是\"}</TableCell>\n                  <TableCell align=\"center\">{data.keepalive}</TableCell>\n\n                  <TableCell align=\"center\">\n                    <ButtonGroup variant=\"text\">\n                      <Button\n                        size='small'\n                        disabled={data.is_extra === 0}\n                        onClick={() => ClientEditOn(data.server_id, data.id)}\n                      >路由</Button>\n                      <Button\n                        size='small'\n                        onClick={() => ClientKeyUpdateOn(data.server_id, data.id, data.username)}\n                      >更新</Button>\n                      <Button\n                        size='small'\n                        color='error'\n                        onClick={() => ClientDel(data.server_id, data.id)}\n                      >删除</Button>\n                    </ButtonGroup>\n                  </TableCell>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <DataWrapper\n        dataOpen={dataOpen}\n        dataClose={dataClose}\n        dataTitle={dataTitle}\n        dataContent={dataContent}\n        dataSave={isEdit ? () => ClientEditConfirm() : () => ClientAddConfirm()}\n      />\n\n      <ConfirmWrapper\n        open={conOpen}\n        username={clientName}\n        close={conClose}\n        save={ClientKeyUpdateConfirm}\n      />\n\n    </Container >\n  )\n}","import { useEffect, useCallback, useState } from 'react'\nimport { styled } from '@mui/material/styles';\nimport Container from '@mui/material/Container'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport TextField from '@mui/material/TextField'\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport Grid from \"@mui/material/Grid\"\n\nimport { useSnackbar } from 'notistack'\nimport { DefaultMsgOption } from '../App'\n\nconst EditTextField = styled(TextField)({\n  '& .MuiInputBase-input': {\n    fontSize: 14,\n    textAlign: \"center\",\n  }\n})\n\nexport default function Rules() {\n  const { enqueueSnackbar } = useSnackbar()\n  const [isEdit, setIsEdit] = useState<number>(0)\n  const [ruleData, setRuleData] = useState<any>([])\n  const [ruleIP, setRuleIP] = useState<string>(\"\")\n  const [ruleEditIP, setRuleEditIP] = useState<string>(\"\")\n\n  const LoadRules = useCallback(() => {\n    const url: string = `http://127.0.0.1:8373/api/v1/data/rulelist`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          const data: any = response.data\n          setRuleData(data)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"尚未添加规则\", DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar('服务错误', DefaultMsgOption)\n        }\n      )\n  }, [enqueueSnackbar])\n\n  const RuleChange = (event: any) => {\n    setRuleIP(event.target.value)\n  }\n\n  const RuleEditChange = (event: any) => {\n    setRuleEditIP(event.target.value)\n  }\n\n  const RuleAdd = () => {\n    if (ruleIP === \"\") {\n      DefaultMsgOption.variant = \"error\"\n      enqueueSnackbar('请输入规则', DefaultMsgOption)\n      return false\n    }\n    let url: string = `http://127.0.0.1:8373/api/v1/rule?allowed_ip=${ruleIP}`\n    fetch(url, {\n      method: \"POST\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"添加成功\", DefaultMsgOption)\n          LoadRules()\n          setRuleIP(\"\")\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  const RuleEditOn = (rule_id: number, rule_ip: string) => {\n    setRuleEditIP(rule_ip)\n    setIsEdit(rule_id)\n  }\n\n  const RuleEditConfirm = (rule_id: number) => {\n    if (ruleEditIP === \"\") {\n      return false\n    }\n    let url: string = `http://127.0.0.1:8373/api/v1/rule/${rule_id}?allowed_ip=${ruleEditIP}`\n    fetch(url, {\n      method: \"PUT\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"修改成功\", DefaultMsgOption)\n          LoadRules()\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n    setIsEdit(0)\n  }\n\n  const RuleDel = (rule_id: number) => {\n    let url: string = `http://127.0.0.1:8373/api/v1/rule/${rule_id}`\n    fetch(url, {\n      method: \"DELETE\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          let lastRuleData: any = []\n          for (let i in ruleData) {\n            let rData: any = ruleData[i]\n            if (rData[\"id\"] !== rule_id) {\n              lastRuleData.push(rData)\n            }\n          }\n          setRuleData(lastRuleData)\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar(\"删除成功\", DefaultMsgOption)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(response.message, DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar(\"服务错误\", DefaultMsgOption)\n        }\n      )\n  }\n\n  useEffect(() => {\n    LoadRules()\n  }, [LoadRules])\n\n  return (\n    <Container sx={{ padding: 2 }}>\n      <Grid\n        container\n        direction=\"row\"\n        spacing=\"16\"\n        sx={{ padding: 2 }}\n      >\n        <Grid item>\n          <TextField\n            label=\"CIDR\"\n            value={ruleIP}\n            onChange={RuleChange}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            sx={{ height: 54 }}\n            size=\"large\"\n            variant=\"contained\"\n            onClick={() => RuleAdd()}\n          >\n            添加规则\n          </Button>\n        </Grid>\n      </Grid>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">ID</TableCell>\n              <TableCell align=\"center\">路由</TableCell>\n              <TableCell align=\"center\">操作</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {ruleData.map((data: any, index: number) => {\n              return (\n                <TableRow\n                  key={\"rule-\" + data.id}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell align=\"center\">{data.id}</TableCell>\n                  {isEdit === data.id ?\n                    <TableCell align=\"center\">\n                      <EditTextField\n                        sx={{ maxWidth: 150 }}\n                        size=\"small\"\n                        variant=\"standard\"\n                        value={ruleEditIP}\n                        onChange={RuleEditChange}\n                      />\n                    </TableCell> :\n                    <TableCell align=\"center\">{data.ip}</TableCell>\n                  }\n\n                  <TableCell align=\"center\">\n                    <ButtonGroup variant=\"contained\">\n                      <Button\n                        color={isEdit === data.id ? \"success\" : \"primary\"}\n                        onClick={isEdit === data.id ? () => RuleEditConfirm(data.id) : (e) => RuleEditOn(data.id, data.ip)}\n                      >\n                        {isEdit === data.id ? \"确定\" : \"编辑\"}\n                      </Button>\n                      <Button\n                        onClick={() => { RuleDel(data.id) }}\n                        color='error'\n                      >\n                        删除\n                      </Button>\n                    </ButtonGroup>\n                  </TableCell>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  )\n}","import { useEffect, useCallback, useState } from 'react'\nimport Container from '@mui/material/Container'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions'\nimport CardContent from '@mui/material/CardContent'\nimport Typography from '@mui/material/Typography'\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport Table from '@mui/material/Table'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport Dialog from '@mui/material/Dialog'\nimport DialogContent from '@mui/material/DialogContent'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\nimport Divider from '@mui/material/Divider'\nimport Tooltip from '@mui/material/Tooltip'\n\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { useSnackbar } from 'notistack'\nimport { DefaultMsgOption } from '../App'\n\nexport default function Summary() {\n  const [allData, setAllData] = useState<any>([])\n  const [nodeCfg, setNodeCfg] = useState<string>(\"\")\n  const { enqueueSnackbar } = useSnackbar()\n\n  const [copyOpen, setCopyOpen] = useState<boolean>(false)\n  const CopyClose = () => {\n    setCopyOpen(false)\n  }\n\n  const CopyWrapper = (props: any) => {\n    const [nodeCopy, setNodeCopy] = useState<boolean>(false)\n    return (\n      <Dialog onClose={props.copyClose} open={props.copyOpen}>\n        <DialogTitle>当前配置</DialogTitle>\n        <DialogContent>\n          <Typography sx={{ whiteSpace: \"pre-line\" }}>\n            {props.copyData}\n          </Typography>\n          <CopyToClipboard\n            text={props.copyData}\n            onCopy={() => setNodeCopy(true)}\n          >\n            <Button color={nodeCopy ? 'success' : 'primary'}>\n              {nodeCopy ? \"已复制\" : \"复制\"}\n            </Button>\n          </CopyToClipboard>\n        </DialogContent>\n      </Dialog >\n    )\n  }\n\n  const ShowNodeCfg = (type: string, serverTitle: string, nodeName: string) => {\n    const para: string = `type=${type}&server=${serverTitle}&node=${nodeName}`\n    const url: string = `http://127.0.0.1:8373/api/v1/data/config?${para}`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar('读取配置文件成功', DefaultMsgOption)\n          const data: any = response.data\n          setNodeCfg(data)\n          setCopyOpen(true)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar('服务错误', DefaultMsgOption)\n        }\n      )\n  }\n\n  const LoadAllData = useCallback(() => {\n    const url: string = `http://127.0.0.1:8373/api/v1/data/servergroup`\n    fetch(url, {\n      method: \"GET\",\n    }).then(res => res.json())\n      .then(response => {\n        const status: number = response.status\n        if (status === 1) {\n          DefaultMsgOption.variant = \"success\"\n          enqueueSnackbar('加载完成', DefaultMsgOption)\n          const data: any = response.data\n          setAllData(data)\n        } else {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar('没有数据', DefaultMsgOption)\n        }\n      }).catch(\n        () => {\n          DefaultMsgOption.variant = \"error\"\n          enqueueSnackbar('服务错误', DefaultMsgOption)\n        }\n      )\n  }, [enqueueSnackbar])\n\n  useEffect(() => {\n    LoadAllData()\n  }, [LoadAllData])\n\n  const UserCard = (props: any) => {\n    var cfgType: string = \"client\"\n    if (props.isServer === 1) {\n      cfgType = \"server\"\n    }\n    return (\n      <Card>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\" color={props.isServer === 0 ? \"\" : \"error\"}>\n            {props.name}\n          </Typography>\n          <Typography sx={{ mb: 1.5 }} variant=\"body2\" color=\"text.secondary\">\n            {props.lan}\n          </Typography>\n          <Typography sx={{ mb: 1.5 }} variant=\"body2\" color=\"text.secondary\">\n            {props.keepalive}秒\n          </Typography>\n          <Typography variant=\"body2\" component='div'>\n            <ButtonGroup variant=\"contained\" size='small' color='success'>\n              <Tooltip disableFocusListener title={props.prikey}>\n                <Button>私钥</Button>\n              </Tooltip>\n              <Tooltip disableFocusListener title={props.pubkey}>\n                <Button>公钥</Button>\n              </Tooltip>\n            </ButtonGroup>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={() => ShowNodeCfg(cfgType, props.serverName, props.name)}>查看配置</Button>\n        </CardActions>\n      </Card >\n    )\n  }\n  return (\n    <Container maxWidth=\"xl\">\n      {allData.map((data: any, index: number) => {\n        return (\n          <Container key={\"serverCard\" + index} maxWidth=\"sm\" sx={{ py: 1 }}>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>服务器名称</TableCell>\n                    <TableCell align=\"right\">{data.server_title}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>服务器地址</TableCell>\n                    <TableCell align=\"right\">{data.server_endpoint}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>服务器子网</TableCell>\n                    <TableCell align=\"right\">{data.server_lan}</TableCell>\n                  </TableRow>\n                </TableHead>\n              </Table>\n            </TableContainer>\n\n            <Box sx={{ flexGrow: 1, py: 2 }} >\n              <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"flex-start\"\n                alignItems=\"center\"\n                spacing={2}\n              >\n                {data.users.map((user: any, index: number) => {\n                  return (\n                    <Grid key={\"nodeCard\" + index} item xs={4} md={6}>\n                      {user.user_name !== \"\" ?\n                        <UserCard\n                          isServer={user.user_is_server}\n                          name={user.user_name}\n                          serverName={data.server_title}\n                          lan={user.user_lan}\n                          keepalive={user.user_keepalive}\n                          prikey={user.user_prikey}\n                          pubkey={user.user_pubkey}\n                        /> :\n                        <Typography variant=\"h5\" color=\"error\">暂无客户端</Typography>\n                      }\n                    </Grid>\n                  )\n                })}\n              </Grid>\n            </Box>\n            <Divider />\n          </Container>\n        )\n      })}\n\n      <CopyWrapper\n        copyOpen={copyOpen}\n        copyClose={CopyClose}\n        copyData={nodeCfg}\n      />\n    </Container>\n  )\n}","import { useState } from 'react'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport { blue } from '@mui/material/colors'\nimport { SnackbarProvider } from 'notistack'\n\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport Box from '@mui/material/Box'\n\nimport Servers from './components/servers'\nimport Nodes from './components/nodes'\nimport Rules from './components/rules'\nimport Summary from './components/summary'\n\nconst myTheme = createTheme({\n  palette: {\n    primary: {\n      main: blue[800],\n    },\n  },\n})\n\nexport const DefaultMsgOption: any = {\n  autoHideDuration: 1000,\n  anchorOrigin: {\n    vertical: 'top',\n    horizontal: 'center',\n  }\n}\n\nexport default function App() {\n  const [tabIndex, setTabIndex] = useState(0)\n  const switchTab = (event: React.SyntheticEvent, newValue: number) => {\n    setTabIndex(newValue)\n  }\n\n  const tabList: any = [\n    { label: \"总览\", comp: <Summary /> },\n    { label: \"节点\", comp: <Nodes /> },\n    { label: \"服务器\", comp: <Servers /> },\n    { label: \"规则\", comp: <Rules /> },\n  ]\n\n  return (\n    <ThemeProvider theme={myTheme}>\n      <SnackbarProvider maxSnack={3}>\n        <Box sx={{ width: '100%' }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={tabIndex} onChange={switchTab} centered>\n              {tabList.map((data: any, index: number) => {\n                return (\n                  <Tab\n                    key={\"simple-tab-\" + index}\n                    id={\"simple-tab-\" + index}\n                    label={data.label}\n                    aria-controls={\"simple-tabpanel-\" + index}\n                  />\n                )\n              })}\n            </Tabs>\n          </Box>\n          {tabList[tabIndex].comp}\n        </Box>\n      </SnackbarProvider>\n    </ThemeProvider>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}